CMAKE_MINIMUM_REQUIRED(VERSION 3.0.0)
PROJECT(cuvid LANGUAGES CXX)

# User Options
# ------------
OPTION(WITH_PYTHON3 "Build with Python3 interface" ON)
OPTION(BUILD_TEST "Build test app" ON)
SET(CUDA_ARCHITECTURES "86" CACHE STRING "Target architecture")
SET(CMAKE_CUDA_COMPILER "/usr/local/cuda/bin/nvcc" CACHE STRING "CUDA compiler")
SET(NVCUVID_LIBRARY_DIR "/usr/lib/x86_64-linux-gnu" CACHE STRING "Directory of CUDA nvcuvid library")

# Basic Settings
# --------------
SET(CMAKE_CXX_STANDARD_REQUIRED ON)
SET(CMAKE_CXX_STANDARD 17)
SET(CMAKE_CXX_EXTENSIONS OFF)
SET(CMAKE_CUDA_STANDARD 14)
SET(CMAKE_CUDA_STANDARD_REQUIRED ON)
SET(CMAKE_POSITION_INDEPENDENT_CODE ON)
SET(CMAKE_SKIP_RPATH ON)
ENABLE_LANGUAGE(CUDA)

# Dependencies
# ------------
FIND_PACKAGE(CUDA REQUIRED)
FIND_PACKAGE(OpenMP REQUIRED)

# Compiler Options
#-----------------
SET(COMPILE_DEFINITIONS "-DCUDA_VERSION_MINOR=${CUDA_VERSION_MINOR}")
IF(CMAKE_BUILD_TYPE STREQUAL "")
    SET(CMAKE_BUILD_TYPE "RELEASE")
ELSE()
    STRING(TOUPPER ${CMAKE_BUILD_TYPE} CMAKE_BUILD_TYPE_UPPER)
ENDIF()
IF(CMAKE_BUILD_TYPE STREQUAL "DEBUG")
    LIST(APPEND COMPILE_DEFINITIONS "VERBOSE_LOG")
    ADD_COMPILE_OPTIONS(-Wall)
ENDIF()

# Build Main Library
# ------------------
FILE(GLOB_RECURSE LIB_SRC_FILES "${CMAKE_SOURCE_DIR}/src/*.cpp")
FILE(GLOB CUDA_KERNELS_SRC "${CMAKE_SOURCE_DIR}/src/NvDecoder/*.cu")
ADD_LIBRARY(${PROJECT_NAME} STATIC ${LIB_SRC_FILES} ${CUDA_KERNELS_SRC})
SET_SOURCE_FILES_PROPERTIES(${CUDA_KERNELS_SRC} PROPERTIES LANGUAGE CUDA)
SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES CUDA_ARCHITECTURES ${CUDA_ARCHITECTURES})
TARGET_COMPILE_DEFINITIONS(${PROJECT_NAME} PRIVATE ${COMPILE_DEFINITIONS})
TARGET_COMPILE_OPTIONS(${PROJECT_NAME} PRIVATE ${OpenMP_CXX_FLAGS})
TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME}
    PRIVATE ${CUDA_INCLUDE_DIRS}
    )
TARGET_LINK_OPTIONS(${PROJECT_NAME}
    PRIVATE ${OpenMP_EXE_LINKER_FLAGS}
    PRIVATE ${OpenMP_CXX_FLAGS}
)
TARGET_LINK_DIRECTORIES(${PROJECT_NAME} PUBLIC "${NVCUVID_LIBRARY_DIR}")
TARGET_LINK_LIBRARIES(${PROJECT_NAME}
    PUBLIC ${CUDA_LIBRARIES}
    PUBLIC nvcuvid
    PUBLIC cuda
    PUBLIC avformat
    PUBLIC avcodec
    PUBLIC avutil
    )
INSTALL(TARGETS ${PROJECT_NAME} LIBRARY)
FILE(GLOB HEADER_FILES "${CMAKE_SOURCE_DIR}/include/*.hpp")
INSTALL(FILES ${HEADER_FILES} DESTINATION "${CMAKE_INSTALL_PREFIX}/include")

# Build Python3 Interface
# -----------------------
IF (WITH_PYTHON3)
    FIND_PACKAGE(PythonInterp 3 REQUIRED)
    EXECUTE_PROCESS(COMMAND ${PYTHON_EXECUTABLE} -c "from distutils import sysconfig; print(sysconfig.get_config_vars()['LIBDIR'], end='')"
        OUTPUT_VARIABLE PYTHON_LIBRARY_DIR)
    FIND_PACKAGE(PythonLibs 3 REQUIRED)
    EXECUTE_PROCESS(COMMAND ${PYTHON_EXECUTABLE} -c "import os,numpy;print(os.path.dirname(numpy.__path__[0]),end='')"
                    OUTPUT_VARIABLE Python3_USER_SITE_DIR)
    EXECUTE_PROCESS(COMMAND ${PYTHON_EXECUTABLE} -c "import numpy;print(numpy.get_include(),end='')"
                    OUTPUT_VARIABLE Python3_NumPy_INCLUDE_DIRS)
    FILE(GLOB_RECURSE LIB_SRC_FILES "${CMAKE_SOURCE_DIR}/python/*.cpp")
    ADD_LIBRARY(pycuvid SHARED ${LIB_SRC_FILES})
    TARGET_COMPILE_DEFINITIONS(pycuvid PRIVATE ${COMPILE_DEFINITIONS})
    TARGET_COMPILE_OPTIONS(pycuvid PRIVATE ${OpenMP_CXX_FLAGS})
    TARGET_INCLUDE_DIRECTORIES(pycuvid
        PRIVATE ${CUDA_INCLUDE_DIRS}
        PRIVATE ${PYTHON_INCLUDE_DIRS}
        PRIVATE ${Python3_NumPy_INCLUDE_DIRS}
        )
    TARGET_LINK_OPTIONS(pycuvid
        PRIVATE ${OpenMP_EXE_LINKER_FLAGS}
        PRIVATE ${OpenMP_CXX_FLAGS}
        )
    TARGET_LINK_LIBRARIES(pycuvid PRIVATE ${PROJECT_NAME})
    ADD_DEPENDENCIES(pycuvid ${PROJECT_NAME})
    INSTALL(FILES "${CMAKE_SOURCE_DIR}/python/__init__.py"
        DESTINATION ${Python3_USER_SITE_DIR}/${PROJECT_NAME}
        )
    INSTALL(FILES $<TARGET_FILE:pycuvid>
        DESTINATION ${Python3_USER_SITE_DIR}/${PROJECT_NAME}
        RENAME "${PROJECT_NAME}.so"
        )
ENDIF(WITH_PYTHON3)

# Build Test
# ----------
IF(BUILD_TEST)
    ADD_EXECUTABLE(${PROJECT_NAME}_test test/test.cpp)
    TARGET_LINK_LIBRARIES(${PROJECT_NAME}_test
        PRIVATE ${PROJECT_NAME}
        )
    ADD_DEPENDENCIES(${PROJECT_NAME}_test ${PROJECT_NAME})
ENDIF(BUILD_TEST)