CMAKE_MINIMUM_REQUIRED(VERSION 3.0.0)
PROJECT(cuvid LANGUAGES CXX)

# Settings
# --------
SET(CMAKE_CXX_STANDARD_REQUIRED ON)
SET(CMAKE_CXX_STANDARD 17)
SET(CMAKE_CXX_EXTENSIONS OFF)
SET(CMAKE_CUDA_STANDARD 14)
SET(CMAKE_CUDA_STANDARD_REQUIRED ON)
SET(CMAKE_CUDA_COMPILER "/usr/local/cuda/bin/nvcc")
SET(CMAKE_POSITION_INDEPENDENT_CODE ON)
SET(CMAKE_SKIP_RPATH ON)
ENABLE_LANGUAGE(CUDA)

# User Options
# ------------
OPTION(JPEG_AS_NUMPY "GetFrame returns jpeg as a numpy ndarray" OFF)
OPTION(CUDA_ARCHITECTURES "CUDA Architectures" "60;75")
OPTION(NVCUVID_LIBRARY_DIR "The path include libnvcuvid.so" "")

# Dependencies
# ------------
FIND_PACKAGE(CUDA REQUIRED)
FIND_PACKAGE(OpenMP REQUIRED)
FIND_PACKAGE(OpenCV REQUIRED core highgui cudaimgproc)

FIND_PACKAGE(PythonInterp 3 REQUIRED)
EXECUTE_PROCESS(COMMAND ${PYTHON_EXECUTABLE} -c "from distutils import sysconfig; print(sysconfig.get_config_vars()['LIBDIR'], end='')"
                OUTPUT_VARIABLE PYTHON_LIBRARY_DIR)
FIND_PACKAGE(PythonLibs 3 REQUIRED)
EXECUTE_PROCESS(COMMAND ${PYTHON_EXECUTABLE} -c "import site; print(site.getusersitepackages(), end='')"
                OUTPUT_VARIABLE Python3_USER_SITE_DIR)
EXECUTE_PROCESS(COMMAND ${PYTHON_EXECUTABLE} -c "import numpy; print(numpy.get_include(), end='')"
                OUTPUT_VARIABLE Python3_NumPy_INCLUDE_DIRS)

# Compiler Options
#-----------------
SET(COMPILE_DEFINITIONS "-DCUDA_VERSION_MINOR=${CUDA_VERSION_MINOR}")
IF(JPEG_AS_NUMPY)
    LIST(APPEND COMPILE_DEFINITIONS -DJPEG_AS_NUMPY)
ENDIF()
IF(CMAKE_BUILD_TYPE STREQUAL "")
    SET(CMAKE_BUILD_TYPE "Release")
ENDIF()
STRING(TOUPPER ${CMAKE_BUILD_TYPE} CMAKE_BUILD_TYPE)
IF(CMAKE_BUILD_TYPE STREQUAL "DEBUG")
    LIST(APPEND COMPILE_DEFINITIONS -DVERBOSE_LOG)
ENDIF()
LINK_DIRECTORIES("${PYTHON_LIBRARY_DIR}" "${NVCUVID_LIBRARY_DIR}")

# Build Main Library
# ------------------
FILE(GLOB_RECURSE LIB_SRC_FILES "${CMAKE_SOURCE_DIR}/src/*.cpp")
FILE(GLOB CUDA_KERNELS_SRC "${CMAKE_SOURCE_DIR}/src/NvDecoder/*.cu")
ADD_LIBRARY(${PROJECT_NAME} STATIC ${LIB_SRC_FILES} ${CUDA_KERNELS_SRC})
SET_SOURCE_FILES_PROPERTIES(${CUDA_KERNELS_SRC} PROPERTIES LANGUAGE CUDA)
SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES CUDA_ARCHITECTURES ${CUDA_ARCHITECTURES})
TARGET_COMPILE_DEFINITIONS(${PROJECT_NAME} PRIVATE ${COMPILE_DEFINITIONS})
TARGET_COMPILE_OPTIONS(${PROJECT_NAME} PRIVATE ${OpenMP_CXX_FLAGS})
TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME}
    PRIVATE ${CUDA_INCLUDE_DIRS}
    PRIVATE ${OpenCV_INCLUDE_DIRS}
    )
TARGET_LINK_OPTIONS(${PROJECT_NAME}
    PRIVATE ${OpenMP_EXE_LINKER_FLAGS}
    PRIVATE ${OpenMP_CXX_FLAGS}
)
TARGET_LINK_LIBRARIES(${PROJECT_NAME}
    PUBLIC ${OpenCV_LIBRARIES}
    PUBLIC ${CUDA_LIBRARIES}
    PUBLIC nvjpeg
    PUBLIC nvcuvid
    PUBLIC cuda
    PUBLIC avformat
    PUBLIC avcodec
    PUBLIC avutil
    )

# Build Python Package
# --------------------
FILE(GLOB_RECURSE LIB_SRC_FILES "${CMAKE_SOURCE_DIR}/python/*.cpp")
ADD_LIBRARY(pycuvid SHARED ${LIB_SRC_FILES})
TARGET_COMPILE_DEFINITIONS(pycuvid PRIVATE ${COMPILE_DEFINITIONS})
TARGET_COMPILE_OPTIONS(pycuvid PRIVATE ${OpenMP_CXX_FLAGS})
TARGET_INCLUDE_DIRECTORIES(pycuvid
    PRIVATE ${CUDA_INCLUDE_DIRS}
    PRIVATE ${OpenCV_INCLUDE_DIRS}
    PRIVATE ${PYTHON_INCLUDE_DIRS}
    PRIVATE ${Python3_NumPy_INCLUDE_DIRS}
    )
TARGET_LINK_OPTIONS(pycuvid
    PRIVATE ${OpenMP_EXE_LINKER_FLAGS}
    PRIVATE ${OpenMP_CXX_FLAGS}
)
TARGET_LINK_LIBRARIES(pycuvid PRIVATE ${PROJECT_NAME})
ADD_DEPENDENCIES(pycuvid ${PROJECT_NAME})

# Build Test
# ----------
ADD_EXECUTABLE(${PROJECT_NAME}_test test/test.cpp)
TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME}_test
    PRIVATE ${OpenCV_INCLUDE_DIRS}
    )
TARGET_LINK_LIBRARIES(${PROJECT_NAME}_test
    PRIVATE ${PROJECT_NAME}
    PRIVATE ${OpenCV_LIBRARIES}
    PRIVATE stdc++fs
    )
ADD_DEPENDENCIES(${PROJECT_NAME}_test ${PROJECT_NAME})

# Installation for C++
# --------------------
INSTALL(TARGETS ${PROJECT_NAME} LIBRARY)
INSTALL(FILES "${CMAKE_SOURCE_DIR}/include/cuvid.hpp"
    DESTINATION "${CMAKE_INSTALL_PREFIX}/include"
    )

# Installation for Python
# --------------------
INSTALL(FILES "${CMAKE_SOURCE_DIR}/python/__init__.py"
    DESTINATION ${Python3_USER_SITE_DIR}/${PROJECT_NAME}
    )
INSTALL(FILES $<TARGET_FILE:pycuvid>
    DESTINATION ${Python3_USER_SITE_DIR}/${PROJECT_NAME}
    RENAME "${PROJECT_NAME}.so"
    )
